//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool dfs(int n, vector<int>adj[], vector<int>&visited, int p)
    {
        
        visited[n]=1;
        for(auto i:adj[n])
        {
            if(i!=p)
            {
                if(!visited[i])
                {
                    bool t=dfs(i, adj, visited, n);
                    if(t)
                        return t;
                }
                else
                    return true;
            }
            
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<int>visited(V);
        for(int i=0;i<V;i++)
        {
            
            if(!visited[i])
        {
         bool k= dfs(i, adj, visited, -1);
         if(k)
         return k;
        }
         
        }
        return false;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends