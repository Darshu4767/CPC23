class Solution {
public:
    void inorder(Node* n, vector<int>& res)
    {
        if(n==NULL)
            return;
      
        inorder(n->left, res);
         if(n->left==NULL && n->right==NULL)
         {
            //cout<<n->data<<"\n";
            res.push_back(n->data);
         }
        inorder(n->right, res);
    }
    vector <int> boundary(Node *root)
    {
        if(root==NULL)
            return {};
        vector<int>res;
        Node* n=root->left;
        res.push_back(root->data);
        if(root->left==NULL && root->right==NULL)
            return res;
        while(n!=NULL && (n->left!=NULL || n->right!=NULL))
        {
            res.push_back(n->data);
            if(n->left!=NULL)
            n=n->left;
            else
            n=n->right;
        }
        inorder(root, res);
        vector<int>temp;
        n=root->right;
        while(n!=NULL && (n->right!=NULL || n->left!=NULL))
        {
            temp.push_back(n->data);
            if(n->right!=NULL)
            n=n->right;
            else
            n=n->left;
        }
        reverse(temp.begin(), temp.end());
        for(auto i:temp)
            res.push_back(i);
        return res;
    }
    
};