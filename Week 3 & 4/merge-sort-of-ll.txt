//{ Driver Code Starts
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};


// } Driver Code Ends
/* Structure of the linked list node is as
struct Node 
{
    int data;
    struct Node* next;
    Node(int x) { data = x;  next = NULL; }
};
*/


class Solution{
  public:
    //Function to sort the given linked list using Merge Sort.
    Node* merge(Node* a, Node* b){
        Node* t=new Node(0);
        Node* h=t;
        while(a!=NULL && b!=NULL)
        {
            if(a->data < b->data)
            {
                t->next=a;
                a=a->next;
            }
            else
            {
                t->next=b;
                b=b->next;
            }
            t=t->next;
        }
        if(a!=NULL)
            t->next=a;
        if(b!=NULL)
            t->next=b;
        return h->next;
    }
    Node* mergeSort(Node* head) {
        if(head==NULL || head->next==NULL)
            return head;
        Node* fp=head,*sp=head,*prev=NULL;
        while(fp && fp->next)
        {
            prev=sp;
            sp=sp->next;
            fp=fp->next->next;
        }
        prev->next=NULL;
        head=mergeSort(head);
        sp=mergeSort(sp);
        head=merge(head,sp);
        return head;
        
    }
};


//{ Driver Code Starts.

void printList(Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

void push(struct Node** head_ref, int new_data) {
    Node* new_node = new Node(new_data);

    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

int main() {
    long test;
    cin >> test;
    while (test--) {
        struct Node* a = NULL;
        long n, tmp;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> tmp;
            push(&a, tmp);
        }
        Solution obj;
        a = obj.mergeSort(a);
        printList(a);
    }
    return 0;
}
// } Driver Code Ends