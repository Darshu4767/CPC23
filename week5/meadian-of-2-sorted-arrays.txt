class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums2.size()<nums1.size())
            swap(nums1,nums2);
    
        int m=nums1.size(),n=nums2.size();
        if(m==0)
        {
            if(n%2)
                return nums2[(n-1)/2];
            else
                return ((double)nums2[(n-1)/2]+(double)nums2[n/2])/2;
        }
        int l=-1, r=m-1;
        int len=m+n;
        while(l<=r)
        {
            int l1=l+(r-l)/2;
            int r1=l1+1;
            int l2=(len-1)/2-l1-1;
            int r2=l2+1;
            int t1=INT_MIN,t2=INT_MAX,k1=INT_MIN,k2=INT_MAX;
            if(l1>=0)
                t1=nums1[l1];
            if(r1<m)
                t2=nums1[r1];
            if(l2>=0)
                k1=nums2[l2];
            if(r2<n)
                k2=nums2[r2];
            if(t1<=k2 && k1<=t2)
            {
                if(len%2)
                    return max(t1,k1);
                else
                    return ((double)max(t1,k1)+(double)min(t2,k2))/2;
            }
            else if(t1>k2)
                r=l1-1;
            else
                l=l1+1;
        }
        
        return 0;
    }
};